@page "/words"
@using GermanLearning.Application.DTO.Vocabulary
@using GermanLearning.Application.DTOs.Vocabulary
@using GermanLearning.Domain.Enums 

@inject IWordService WordService
@inject ITopicService TopicService // <<< INJECT ITOPICSERVICE
@inject NavigationManager Navigation
@rendermode InteractiveServer

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudPopoverProvider />

<MudText Typo="Typo.h5">Vocabulary List</MudText>
<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => Navigation.NavigateTo("/words/add"))" Style="margin-bottom: 20px;">Add New Word</MudButton>

<MudGrid Class="mb-4">
    <MudItem xs="12" sm="6" md="3">
        @* Bind to the int value of the enum for filtering against WordTypeId *@
        <MudSelect T="int?" Label="Type" @bind-Value="_selectedWordTypeId" Clearable="true">
            <MudSelectItem Value="@((int?)null)">(All)</MudSelectItem>
            @foreach (var typeLookup in _allWordTypes)
            {
                <MudSelectItem Value="@typeLookup.Id">@typeLookup.Name</MudSelectItem>
            }
        </MudSelect>
    </MudItem>

    <MudItem xs="12" sm="6" md="3">
        <MudSelect T="int?" Label="Gender" @bind-Value="_selectedGenderId" Clearable="true">
            <MudSelectItem Value="@((int?)null)">(All)</MudSelectItem>
            @foreach (var genderLookup in _allGenders)
            {
                <MudSelectItem Value="@genderLookup.Id">@genderLookup.Name</MudSelectItem>
            }
        </MudSelect>
    </MudItem>

    <MudItem xs="12" sm="6" md="3">
        <MudSelect T="string" Label="Topic" MultiSelection="true" @bind-SelectedValues="_selectedTopicNames" Clearable="true" SelectAll="true" SelectAllText="Select All Topics">
            @if (_allTopicsForFilter != null)
            {
                @foreach (var topic in _allTopicsForFilter)
                {
                    <MudSelectItem Value="@topic.Name">@topic.Name</MudSelectItem>
                }
            }
        </MudSelect>
    </MudItem>

    <MudItem xs="12" sm="6" md="3" Class="d-flex align-center">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ApplyFilters" Class="mr-2">Filter</MudButton>
        <MudButton Variant="Variant.Outlined" OnClick="ClearFilters">Clear</MudButton>
    </MudItem>
</MudGrid>

@if (_filteredWords == null)
{
    <MudProgressCircular Indeterminate="true" />
}
else
{
    <MudTable Items="_filteredWords" Hover="true" Bordered="true" Striped="true" Dense="true" FixedHeader="true" Height="calc(100vh - 350px)">
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<WordDto, object>(w => w.GermanText)">German</MudTableSortLabel></MudTh>
            <MudTh>EN Translations</MudTh>
            <MudTh>ES Translations</MudTh>
            <MudTh>Type</MudTh>
            <MudTh>Gender</MudTh>
            <MudTh>Topics</MudTh>
            <MudTh>Synonyms</MudTh>
            <MudTh>Examples</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="German">@context.GermanText</MudTd>
            <MudTd DataLabel="EN Translations">@string.Join(", ", context.EnglishTranslation)</MudTd>
            <MudTd DataLabel="ES Translations">@string.Join(", ", context.SpanishTranslation)</MudTd>
            <MudTd DataLabel="Type">@context.TypeString</MudTd>
            <MudTd DataLabel="Gender">@context.GenderString</MudTd>
            <MudTd DataLabel="Topics">@string.Join(", ", context.TopicNames)</MudTd>
            <MudTd DataLabel="Synonyms">@string.Join(", ", context.Synonyms)</MudTd>
            <MudTd DataLabel="Examples">
                @if (context.ExampleSentences.Any())
                {
                    <MudButton Variant="Variant.Text" Color="Color.Primary" Size="Size.Small" OnClick="@(() => ShowExamples(context.ExampleSentences))">
                        View (@context.ExampleSentences.Count)
                    </MudButton>
                }
                else
                {
                    <MudText Typo="Typo.caption">None</MudText>
                }
            </MudTd>
            <MudTd DataLabel="Actions">
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Title="Edit" Color="Color.Primary" Size="Size.Small" OnClick="@(() => EditWord(context.Id))" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Title="Delete" Color="Color.Error" Size="Size.Small" OnClick="@(() => ConfirmDelete(context.Id, context.GermanText))" />
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}

@code {
    private List<WordDto>? _allWords;
    private List<WordDto>? _filteredWords;

    // For filter dropdowns
    private List<TopicDto> _allTopicsForFilter = new();
    private List<WordTypeLookUpDto> _allWordTypes = new();
    private List<GenderLookUpDto> _allGenders = new();

    // Bound filter values
    private int? _selectedWordTypeId;
    private int? _selectedGenderId;
    private IEnumerable<string> _selectedTopicNames = new List<string>();

    [Inject] private IDialogService DialogService { get; set; } = default!;
    [Inject] private ISnackbar Snackbar { get; set; } = default!;


    protected override async Task OnInitializedAsync()
    {
        await LoadInitialData();
    }

    private async Task LoadInitialData()
    {
        _allWords = await WordService.GetAllWordsAsync();
        _allTopicsForFilter = await TopicService.GetAllTopicsAsync(); // Fetch all topics

        // Populate WordType and Gender lookups (replace with service calls if available)
        _allWordTypes = Enum.GetValues<WordType>()
                            .Select(wt => new WordTypeLookUpDto { Id = (int)wt, Name = wt.ToString() })
                            .ToList();
        _allGenders = Enum.GetValues<Gender>()
                            .Select(g => new GenderLookUpDto { Id = (int)g, Name = g.ToString() })
                            .Where(g => g.Id != (int)Gender.None) // Exclude "None" if it's just a placeholder
                            .ToList();
        
        ApplyFilters(); // Apply initial (empty) filters
    }

    private void ApplyFilters()
    {
        if (_allWords == null)
        {
            _filteredWords = new List<WordDto>();
            return;
        }

        IEnumerable<WordDto> tempFiltered = _allWords;

        if (_selectedWordTypeId.HasValue)
        {
            // Compare against the integer value of the enum
            tempFiltered = tempFiltered.Where(w => (int)w.Type == _selectedWordTypeId.Value);
        }

        if (_selectedGenderId.HasValue)
        {
            tempFiltered = tempFiltered.Where(w => w.Gender.HasValue && (int)w.Gender.Value == _selectedGenderId.Value);
        }

        if (_selectedTopicNames.Any())
        {
            tempFiltered = tempFiltered.Where(w => w.TopicNames.Any(tn => _selectedTopicNames.Contains(tn)));
        }

        _filteredWords = tempFiltered.ToList();
    }

    private void ClearFilters()
    {
        _selectedWordTypeId = null;
        _selectedGenderId = null;
        _selectedTopicNames = new List<string>();
        ApplyFilters();
    }

    private void EditWord(Guid id)
    {
        Navigation.NavigateTo($"/words/edit/{id}");
    }

    private async Task ConfirmDelete(Guid id, string wordText)
    {
        var parameters = new DialogParameters<DeleteConfirmationDialog>();
        parameters.Add(x => x.ContentText, $"Are you sure you want to delete the word '{wordText}'?");
        
        var dialog = DialogService.Show<DeleteConfirmationDialog>("Confirm Deletion", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                await WordService.DeleteWordAsync(id);
                Snackbar.Add($"Word '{wordText}' deleted successfully.", Severity.Success);
                _allWords?.RemoveAll(w => w.Id == id); // Remove from local list
                ApplyFilters(); // Re-apply filters
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting word: {ex.Message}", Severity.Error);
            }
        }
    }

    private void ShowExamples(List<string> examples)
    {
        var parameters = new DialogParameters<ExampleDialog> { ["Examples"] = examples };
        DialogService.Show<ExampleDialog>("Example Sentences", parameters);
    }
}