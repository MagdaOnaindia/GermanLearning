@page "/words/edit/{Id:guid}"
@using GermanLearning.Application.DTO.Vocabulary
@using GermanLearning.Application.DTOs
@using GermanLearning.Application.DTOs.Vocabulary
@using GermanLearning.Application.Features.Vocabulary.Commands
@using GermanLearning.Domain.Enums
@inject IWordService WordService
@inject ITopicService TopicService
@inject IWordTypeLookupService WordTypeLookupService 
@inject IGenderLookupService GenderLookupService    
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@rendermode InteractiveServer

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudPopoverProvider />

@if (_command == null && _isLoading)
{
    <MudText Typo="Typo.h5" Class="mb-4">Loading word...</MudText>
    <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
}
else if (_command == null && !_isLoading) // Word not found after attempting to load
{
    <MudAlert Severity="Severity.Error">Word not found. It may have been deleted.</MudAlert>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => Navigation.NavigateTo("/words"))" Class="mt-4">Back to List</MudButton>
}
else if (_command != null)
{
    <MudText Typo="Typo.h5" Class="mb-4">Edit Word: <MudText Typo="Typo.h5" Color="Color.Primary" Inline="true">@_originalGermanText</MudText></MudText>
    <EditForm Model="_command" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <MudGrid Spacing="3">
            <MudItem xs="12" md="6">
                <MudTextField Label="German" @bind-Value="_command.GermanText" For="@(() => _command.GermanText)" Required="true" Variant="Variant.Outlined" />
            </MudItem>

            <MudItem xs="12" md="6">
                <MudSelect T="WordType" Label="Type" @bind-Value="_command.Type" For="@(() => _command.Type)" Required="true" Immediate="true" Variant="Variant.Outlined">
                    @if (_allWordTypesForSelect != null)
                    {
                        @foreach (var typeLookup in _allWordTypesForSelect)
                        {
                            <MudSelectItem Value="@((WordType)typeLookup.Id)">@typeLookup.Name</MudSelectItem>
                        }
                    }
                </MudSelect>

                @if (_command.Type == WordType.Noun)
                {
                    <MudSelect T="Gender?" Label="Gender" @bind-Value="_command.Gender" For="@(() => _command.Gender)" Required="@(_command.Type == WordType.Noun)" Variant="Variant.Outlined">
                        <MudSelectItem Value="@((Gender?)null)">(Select Gender)</MudSelectItem>
                        @if (_allGendersForSelect != null)
                        {
                            @foreach (var genderLookup in _allGendersForSelect)
                            {
                                <MudSelectItem Value="@((Gender)genderLookup.Id)">@genderLookup.Name</MudSelectItem>
                            }
                        }
                    </MudSelect>
                }
            </MudItem>

            <MudItem xs="12">
                <MudText Typo="Typo.subtitle1" Class="mt-3 mb-1">Translations</MudText>
                <MudField Label="English Translations" Variant="Variant.Outlined" Class="mb-3">
                    @for (int i = 0; i < _command.EnglishTranslation.Count; i++)
                    {
                        var index = i;
                        <MudPaper Elevation="0" Class="d-flex align-center pa-1 mb-1">
                            <MudTextField @bind-Value="_command.EnglishTranslation[index]" Dense="true" Margin="Margin.Dense" HideDetails="true" Placeholder="@($"English Translation {index + 1}")" Class="flex-grow-1" Variant="Variant.Text" />
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="@(() => RemoveListItem(_command.EnglishTranslation, index))" Disabled="_command.EnglishTranslation.Count <= 1 && string.IsNullOrWhiteSpace(_command.EnglishTranslation[0])" />
                        </MudPaper>
                    }
                    <MudButton Variant="Variant.Text" Size="Size.Small" OnClick="@(() => AddListItem(_command.EnglishTranslation))" StartIcon="@Icons.Material.Filled.Add" Class="mt-1">Add English</MudButton>
                </MudField>

                <MudField Label="Spanish Translations" Variant="Variant.Outlined">
                    @for (int i = 0; i < _command.SpanishTranslation.Count; i++)
                    {
                        var index = i;
                        <MudPaper Elevation="0" Class="d-flex align-center pa-1 mb-1">
                            <MudTextField @bind-Value="_command.SpanishTranslation[index]" Dense="true" Margin="Margin.Dense" HideDetails="true" Placeholder="@($"Spanish Translation {index + 1}")" Class="flex-grow-1" Variant="Variant.Text" />
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="@(() => RemoveListItem(_command.SpanishTranslation, index))" Disabled="_command.SpanishTranslation.Count <= 1 && string.IsNullOrWhiteSpace(_command.SpanishTranslation[0])" />
                        </MudPaper>
                    }
                    <MudButton Variant="Variant.Text" Size="Size.Small" OnClick="@(() => AddListItem(_command.SpanishTranslation))" StartIcon="@Icons.Material.Filled.Add" Class="mt-1">Add Spanish</MudButton>
                </MudField>
            </MudItem>

            <MudItem xs="12">
                <MudSelect T="string" Label="Topics" Class="mt-3" MultiSelection="true" @bind-SelectedValues="_selectedTopicNamesForForm"
                           HelperText="Select one or more topics." Clearable="true" SelectAll="true" SelectAllText="All Topics" Variant="Variant.Outlined">
                    @if (_allTopicsForSelect != null)
                    {
                        @foreach (var topic in _allTopicsForSelect)
                        {
                            <MudSelectItem Value="@topic.Name">@topic.Name</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>

            <MudItem xs="12">
                <MudText Typo="Typo.subtitle1" Class="mt-3 mb-1">Examples & Synonyms</MudText>
                <MudField Label="Example Sentences" Variant="Variant.Outlined" Class="mb-3">
                    @for (int i = 0; i < _command.ExampleSentences.Count; i++)
                    {
                        var index = i;
                        <MudPaper Elevation="0" Class="d-flex align-center pa-1 mb-1">
                            <MudTextField @bind-Value="_command.ExampleSentences[index]" Dense="true" Margin="Margin.Dense" HideDetails="true" Placeholder="@($"Example {index + 1}")" Class="flex-grow-1" Variant="Variant.Text" />
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="@(() => RemoveListItem(_command.ExampleSentences, index))" Disabled="_command.ExampleSentences.Count <= 1 && string.IsNullOrWhiteSpace(_command.ExampleSentences[0])" />
                        </MudPaper>
                    }
                    <MudButton Variant="Variant.Text" Size="Size.Small" OnClick="@(() => AddListItem(_command.ExampleSentences))" StartIcon="@Icons.Material.Filled.Add" Class="mt-1">Add Example</MudButton>
                </MudField>

                <MudField Label="Synonyms" Variant="Variant.Outlined">
                    @for (int i = 0; i < _command.Synonyms.Count; i++)
                    {
                        var index = i;
                        <MudPaper Elevation="0" Class="d-flex align-center pa-1 mb-1">
                            <MudTextField @bind-Value="_command.Synonyms[index]" Dense="true" Margin="Margin.Dense" HideDetails="true" Placeholder="@($"Synonym {index + 1}")" Class="flex-grow-1" Variant="Variant.Text" />
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="@(() => RemoveListItem(_command.Synonyms, index))" Disabled="_command.Synonyms.Count <= 1 && string.IsNullOrWhiteSpace(_command.Synonyms[0])" />
                        </MudPaper>
                    }
                    <MudButton Variant="Variant.Text" Size="Size.Small" OnClick="@(() => AddListItem(_command.Synonyms))" StartIcon="@Icons.Material.Filled.Add" Class="mt-1">Add Synonym</MudButton>
                </MudField>
            </MudItem>

            <MudItem xs="12" Class="mt-4">
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Disabled="@_isSaving" Class="mr-2">
                    @if (_isSaving)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Saving...</MudText>
                    }
                    else
                    {
                        <MudText>Update Word</MudText>
                    }
                </MudButton>
                <MudButton Variant="Variant.Outlined" OnClick="@(() => Navigation.NavigateTo("/words"))">Cancel</MudButton>
            </MudItem>
        </MudGrid>
    </EditForm>
}

@code {
    [Parameter] public Guid Id { get; set; }

    private UpdateWordCommand? _command;
    private string _originalGermanText = string.Empty;
    private List<TopicDto> _allTopicsForSelect = new();
    private IEnumerable<string> _selectedTopicNamesForForm = new List<string>();
    private bool _isSaving = false;
    private bool _isLoading = true;

    private List<WordTypeLookupDto> _allWordTypesForSelect = new();
    private List<GenderLookupDto> _allGendersForSelect = new();

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        try
        {
            var wordDtoTask = WordService.GetWordByIdAsync(Id);
            var topicsTask = TopicService.GetAllTopicsAsync();
            var wordTypesTask = WordTypeLookupService.GetAllAsync();
            var gendersTask = GenderLookupService.GetAllAsync(excludeNone: true);

            await Task.WhenAll(wordDtoTask, topicsTask, wordTypesTask, gendersTask);

            var wordDto = await wordDtoTask;
            _allTopicsForSelect = await topicsTask;
            _allWordTypesForSelect = await wordTypesTask;
            _allGendersForSelect = await gendersTask;

            if (wordDto == null)
            {
                Snackbar.Add("Word not found.", Severity.Error);
                Navigation.NavigateTo("/words");
                _isLoading = false; // Stop loading if word not found
                return;
            }

            _originalGermanText = wordDto.GermanText;
            _command = new UpdateWordCommand
                {
                    Id = wordDto.Id,
                    GermanText = wordDto.GermanText,
                    EnglishTranslation = wordDto.EnglishTranslation.Any() ? new List<string>(wordDto.EnglishTranslation) : new List<string> { "" },
                    SpanishTranslation = wordDto.SpanishTranslation.Any() ? new List<string>(wordDto.SpanishTranslation) : new List<string> { "" },
                    Type = wordDto.Type,
                    Gender = wordDto.Gender, // It can be null if not a noun or not set
                    TopicNames = new List<string>(wordDto.TopicNames),
                    ExampleSentences = wordDto.ExampleSentences.Any() ? new List<string>(wordDto.ExampleSentences) : new List<string> { "" },
                    Synonyms = wordDto.Synonyms.Any() ? new List<string>(wordDto.Synonyms) : new List<string> { "" }
                };
            _selectedTopicNamesForForm = new List<string>(_command.TopicNames);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading word details: {ex.Message}", Severity.Error);
            Console.WriteLine($"Error loading word details: {ex.Message}{Environment.NewLine}{ex.StackTrace}");
            Navigation.NavigateTo("/words"); // Navigate away if loading fails
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        if (_command == null) return;
        _isSaving = true;

        try
        {
            _command.TopicNames = _selectedTopicNamesForForm.ToList();
            _command.EnglishTranslation = _command.EnglishTranslation.Where(s => !string.IsNullOrWhiteSpace(s)).ToList();
            _command.SpanishTranslation = _command.SpanishTranslation.Where(s => !string.IsNullOrWhiteSpace(s)).ToList();
            _command.ExampleSentences = _command.ExampleSentences.Where(s => !string.IsNullOrWhiteSpace(s)).ToList();
            _command.Synonyms = _command.Synonyms.Where(s => !string.IsNullOrWhiteSpace(s)).ToList();

            if (_command.Type != WordType.Noun)
            {
                _command.Gender = null;
            }
            else if (_command.Gender == null || _command.Gender == Gender.None)
            {
                Snackbar.Add("Nouns must have a Gender selected.", Severity.Error);
                _isSaving = false;
                return;
            }

            await WordService.UpdateWordAsync(_command);
            Snackbar.Add("Word updated successfully!", Severity.Success);
            Navigation.NavigateTo("/words");
        }
        catch (FluentValidation.ValidationException vex)
        {
            foreach (var error in vex.Errors)
            {
                Snackbar.Add($"Validation Error: {error.ErrorMessage}", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error updating word: {ex.Message}", Severity.Error);
            Console.WriteLine($"Error updating word: {ex.Message}{Environment.NewLine}{ex.StackTrace}");
        }
        finally
        {
            _isSaving = false;
        }
    }

    private void AddListItem(List<string> list)
    {
        list.Add("");
        StateHasChanged();
    }

    private void RemoveListItem(List<string> list, int index)
    {
        if (list.Count > 1)
        {
            list.RemoveAt(index);
        }
        else if (list.Count == 1)
        {
            list[0] = "";
        }
        StateHasChanged();
    }
}