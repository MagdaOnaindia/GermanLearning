@page "/words/add"
@using GermanLearning.Application.DTOs.Vocabulary
@using GermanLearning.Application.Features.Vocabulary.Commands
@using GermanLearning.Domain.Enums
@using GermanLearning.Application.DTO.Vocabulary // For TopicDto
@inject IWordService WordService
@inject ITopicService TopicService //
@inject NavigationManager Navigation
@inject ISnackbar Snackbar // For error messages
@rendermode InteractiveServer

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudText Typo="Typo.h5">Add New Word</MudText>
<EditForm Model="_command" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator /> @* Important for validating command annotations *@
    <MudGrid>
        <MudItem xs="12" md="6">
            <MudTextField Label="German" @bind-Value="_command.GermanText" For="@(() => _command.GermanText)" Required="true" />
        </MudItem>

        <MudItem xs="12" md="6">
            <MudSelect T="WordType" Label="Type" @bind-Value="_command.Type" For="@(() => _command.Type)" Required="true" Immediate="true">
                @* Populate from lookup DTOs or enums if services not ready *@
                @foreach (var typeLookup in _allWordTypes)
                {
                    <MudSelectItem Value="@((WordType)typeLookup.Id)">@typeLookup.Name</MudSelectItem>
                }
            </MudSelect>

            @if (_command.Type == WordType.Noun)
            {
                <MudSelect T="Gender?" Label="Gender" @bind-Value="_command.Gender" For="@(() => _command.Gender)" Required="true">
                    <MudSelectItem Value="@((Gender?)null)">(Select Gender)</MudSelectItem>
                    @foreach (var genderLookup in _allGenders)
                    {
                        <MudSelectItem Value="@((Gender)genderLookup.Id)">@genderLookup.Name</MudSelectItem>
                    }
                </MudSelect>
            }
        </MudItem>

        <MudItem xs="12">
            <MudText Typo="Typo.h6" Class="mt-4 mb-2">Translations</MudText>
            <MudField Label="English Translations" Variant="Variant.Outlined" Class="mb-3">
                @for (int i = 0; i < _command.EnglishTranslation.Count; i++)
                {
                    var index = i; //  Capture variable for lambda
                    <MudPaper Elevation="0" Class="d-flex align-center pa-1 mb-1">
                        <MudTextField @bind-Value="_command.EnglishTranslation[index]" Dense="true" Margin="Margin.Dense" HideDetails="true" Placeholder="@($"English Translation {index + 1}")" Class="flex-grow-1" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="@(() => RemoveListItem(_command.EnglishTranslation, index))" Disabled="_command.EnglishTranslation.Count <= 1" />
                    </MudPaper>
                }
                <MudButton Variant="Variant.Text" Size="Size.Small" OnClick="@(() => AddListItem(_command.EnglishTranslation))" StartIcon="@Icons.Material.Filled.Add" Class="mt-1">Add English</MudButton>
            </MudField>

            <MudField Label="Spanish Translations" Variant="Variant.Outlined">
                @for (int i = 0; i < _command.SpanishTranslation.Count; i++)
                {
                    var index = i; //  Capture variable for lambda
                    <MudPaper Elevation="0" Class="d-flex align-center pa-1 mb-1">
                        <MudTextField @bind-Value="_command.SpanishTranslation[index]" Dense="true" Margin="Margin.Dense" HideDetails="true" Placeholder="@($"Spanish Translation {index + 1}")" Class="flex-grow-1" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="@(() => RemoveListItem(_command.SpanishTranslation, index))" Disabled="_command.SpanishTranslation.Count <= 1" />
                    </MudPaper>
                }
                <MudButton Variant="Variant.Text" Size="Size.Small" OnClick="@(() => AddListItem(_command.SpanishTranslation))" StartIcon="@Icons.Material.Filled.Add" Class="mt-1">Add Spanish</MudButton>
            </MudField>
        </MudItem>

        <MudItem xs="12">
            <MudSelect T="string" Label="Topics" MultiSelection="true" @bind-SelectedValues="_selectedTopicNamesForForm"
                       HelperText="Select one or more topics. New topics can be added via Topic Management." Clearable="true" SelectAll="true">
                @if (_allTopicsForSelect != null)
                {
                    @foreach (var topic in _allTopicsForSelect)
                    {
                        <MudSelectItem Value="@topic.Name">@topic.Name</MudSelectItem>
                    }
                }
            </MudSelect>
        </MudItem>


        <MudItem xs="12">
            <MudText Typo="Typo.h6" Class="mt-4 mb-2">Examples & Synonyms</MudText>
            <MudField Label="Example Sentences" Variant="Variant.Outlined" Class="mb-3">
                @for (int i = 0; i < _command.ExampleSentences.Count; i++)
                {
                    var index = i;
                    <MudPaper Elevation="0" Class="d-flex align-center pa-1 mb-1">
                        <MudTextField @bind-Value="_command.ExampleSentences[index]" Dense="true" Margin="Margin.Dense" HideDetails="true" Placeholder="@($"Example {index + 1}")" Class="flex-grow-1" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="@(() => RemoveListItem(_command.ExampleSentences, index))" Disabled="_command.ExampleSentences.Count <= 1 && string.IsNullOrWhiteSpace(_command.ExampleSentences[0])" />
                    </MudPaper>
                }
                <MudButton Variant="Variant.Text" Size="Size.Small" OnClick="@(() => AddListItem(_command.ExampleSentences))" StartIcon="@Icons.Material.Filled.Add" Class="mt-1">Add Example</MudButton>
            </MudField>

            <MudField Label="Synonyms" Variant="Variant.Outlined">
                @for (int i = 0; i < _command.Synonyms.Count; i++)
                {
                    var index = i;
                    <MudPaper Elevation="0" Class="d-flex align-center pa-1 mb-1">
                        <MudTextField @bind-Value="_command.Synonyms[index]" Dense="true" Margin="Margin.Dense" HideDetails="true" Placeholder="@($"Synonym {index + 1}")" Class="flex-grow-1" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="@(() => RemoveListItem(_command.Synonyms, index))" Disabled="_command.Synonyms.Count <= 1 && string.IsNullOrWhiteSpace(_command.Synonyms[0])" />
                    </MudPaper>
                }
                <MudButton Variant="Variant.Text" Size="Size.Small" OnClick="@(() => AddListItem(_command.Synonyms))" StartIcon="@Icons.Material.Filled.Add" Class="mt-1">Add Synonym</MudButton>
            </MudField>
        </MudItem>

        <MudItem xs="12" Class="mt-4">
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Disabled="@_isSaving">
                @if (_isSaving)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Saving...</MudText>
                }
                else
                {
                    <MudText>Save Word</MudText>
                }
            </MudButton>
            <MudButton Variant="Variant.Outlined" OnClick="@(() => Navigation.NavigateTo("/words"))" Class="ml-2">Cancel</MudButton>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    private AddWordCommand _command = new();
    private List<TopicDto> _allTopicsForSelect = new();
    private IEnumerable<string> _selectedTopicNamesForForm = new List<string>(); // For binding MudSelect
    private bool _isSaving = false;

    // For populating Type/Gender dropdowns
    private List<WordTypeLookUpDto> _allWordTypes = new();
    private List<GenderLookUpDto> _allGenders = new();

    protected override async Task OnInitializedAsync()
    {
        // Ensure default lists have at least one item for the UI
        if (!_command.EnglishTranslation.Any()) _command.EnglishTranslation.Add("");
        if (!_command.SpanishTranslation.Any()) _command.SpanishTranslation.Add("");
        if (!_command.ExampleSentences.Any()) _command.ExampleSentences.Add("");
        if (!_command.Synonyms.Any()) _command.Synonyms.Add("");

        _allTopicsForSelect = await TopicService.GetAllTopicsAsync();

        // Populate WordType and Gender lookups
        _allWordTypes = Enum.GetValues<WordType>()
                            .Select(wt => new WordTypeLookUpDto { Id = (int)wt, Name = wt.ToString() })
                            .ToList();
        _allGenders = Enum.GetValues<Gender>()
                            .Select(g => new GenderLookUpDto { Id = (int)g, Name = g.ToString() })
                            .Where(g => g.Id != (int)Gender.None) // Exclude "None" if it's a placeholder
                            .ToList();
    }

    private async Task HandleValidSubmit()
    {
        _isSaving = true;
        try
        {
            // Assign selected topic names to the command
            _command.TopicNames = _selectedTopicNamesForForm.ToList();

            // Filter out empty strings from lists before sending
            _command.EnglishTranslation = _command.EnglishTranslation.Where(s => !string.IsNullOrWhiteSpace(s)).ToList();
            _command.SpanishTranslation = _command.SpanishTranslation.Where(s => !string.IsNullOrWhiteSpace(s)).ToList();
            _command.ExampleSentences = _command.ExampleSentences.Where(s => !string.IsNullOrWhiteSpace(s)).ToList();
            _command.Synonyms = _command.Synonyms.Where(s => !string.IsNullOrWhiteSpace(s)).ToList();

            // Ensure Noun has a Gender, otherwise set Gender to null
            if (_command.Type != WordType.Noun)
            {
                _command.Gender = null;
            }
            else if (_command.Gender == Gender.None) // If it's a Noun, Gender.None is not valid
            {
                Snackbar.Add("Nouns must have a Gender selected.", Severity.Error);
                _isSaving = false;
                return;
            }


            await WordService.AddWordAsync(_command);
            Snackbar.Add("Word added successfully!", Severity.Success);
            Navigation.NavigateTo("/words");
        }
        catch (FluentValidation.ValidationException vex)
        {
            foreach (var error in vex.Errors)
            {
                Snackbar.Add($"Validation Error: {error.ErrorMessage}", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error adding word: {ex.Message}", Severity.Error);
            Console.WriteLine($"Error adding word: {ex.Message}{Environment.NewLine}{ex.StackTrace}");
        }
        finally
        {
            _isSaving = false;
        }
    }

    // Helper methods for dynamic lists
    private void AddListItem(List<string> list)
    {
        list.Add("");
        StateHasChanged(); // Notify Blazor to re-render
    }

    private void RemoveListItem(List<string> list, int index)
    {
        if (list.Count > 1) // Prevent removing the last item if you want at least one input field
        {
            list.RemoveAt(index);
            StateHasChanged();
        }
        else if (list.Count == 1) // If it's the last one, clear it instead of removing
        {
            list[0] = "";
            StateHasChanged();
        }
    }
}