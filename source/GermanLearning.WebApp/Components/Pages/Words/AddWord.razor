@page "/words/add"

@using GermanLearning.Application.DTOs.Vocabulary
@using GermanLearning.Application.Features.Vocabulary.Commands
@using GermanLearning.Domain.Enums
@using GermanLearning.Application.DTO.Vocabulary 
@inject IWordService WordService
@inject ITopicService TopicService
@inject IWordTypeLookupService WordTypeLookupService
@inject IGenderLookupService GenderLookupService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@rendermode InteractiveServer

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudPopoverProvider />

<MudText Typo="Typo.h5">Add New Word</MudText>
<EditForm Model="_command" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" md="6">
            <MudTextField Label="German" @bind-Value="_command.GermanText" For="@(() => _command.GermanText)" Required="true" />
        </MudItem>

        <MudItem xs="12" md="6">
            <MudSelect T="WordType" Label="Type" @bind-Value="_command.Type" For="@(() => _command.Type)" Required="true">
                @if (_allWordTypesForSelect != null)
                {
                    @foreach (var typeLookup in _allWordTypesForSelect)
                    {
                        <MudSelectItem T="WordType" @key="typeLookup.Id" Value="@((WordType)typeLookup.Id)">@typeLookup.Name</MudSelectItem>
                    }
                }
            </MudSelect>

            @if (_command.Type == WordType.Noun)
            {
                <MudSelect T="Gender?" Label="Gender" @bind-Value="_command.Gender" For="@(() => _command.Gender)" Required="@(_command.Type == WordType.Noun)">
                    <MudSelectItem T="Gender?" Value="@((Gender?)null)">(Select Gender)</MudSelectItem>
                    @if (_allGendersForSelect != null)
                    {
                        @foreach (var genderLookup in _allGendersForSelect)
                        {
                            <MudSelectItem T="Gender?" @key="genderLookup.Id" Value="@((Gender)genderLookup.Id)">@genderLookup.Name</MudSelectItem>
                        }
                    }
                </MudSelect>
            }
        </MudItem>

        @* ... Rest of your form (Translations, Topics, Examples, Synonyms) ... *@
        <MudItem xs="12">
            <MudText Typo="Typo.h6" Class="mt-4 mb-2">Translations</MudText>
            <MudField Label="English Translations" Variant="Variant.Outlined" Class="mb-3">
                @for (int i = 0; i < _command.EnglishTranslation.Count; i++)
                {
                    var index = i;
                    <MudPaper Elevation="0" Class="d-flex align-center pa-1 mb-1">
                        <MudTextField @bind-Value="_command.EnglishTranslation[index]" Dense="true" Margin="Margin.Dense" HideDetails="true" Placeholder="@($"English Translation {index + 1}")" Class="flex-grow-1" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="@(() => RemoveListItem(_command.EnglishTranslation, index))" Disabled="_command.EnglishTranslation.Count <= 1 && string.IsNullOrWhiteSpace(_command.EnglishTranslation[0])" />
                    </MudPaper>
                }
                <MudButton Variant="Variant.Text" Size="Size.Small" OnClick="@(() => AddListItem(_command.EnglishTranslation))" StartIcon="@Icons.Material.Filled.Add" Class="mt-1">Add English</MudButton>
            </MudField>

            <MudField Label="Spanish Translations" Variant="Variant.Outlined">
                @for (int i = 0; i < _command.SpanishTranslation.Count; i++)
                {
                    var index = i;
                    <MudPaper Elevation="0" Class="d-flex align-center pa-1 mb-1">
                        <MudTextField @bind-Value="_command.SpanishTranslation[index]" Dense="true" Margin="Margin.Dense" HideDetails="true" Placeholder="@($"Spanish Translation {index + 1}")" Class="flex-grow-1" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="@(() => RemoveListItem(_command.SpanishTranslation, index))" Disabled="_command.SpanishTranslation.Count <= 1 && string.IsNullOrWhiteSpace(_command.SpanishTranslation[0])" />
                    </MudPaper>
                }
                <MudButton Variant="Variant.Text" Size="Size.Small" OnClick="@(() => AddListItem(_command.SpanishTranslation))" StartIcon="@Icons.Material.Filled.Add" Class="mt-1">Add Spanish</MudButton>
            </MudField>
        </MudItem>

        <MudItem xs="12">
            <MudSelect T="string" Label="Topics" MultiSelection="true" @bind-SelectedValues="_selectedTopicNamesForForm"
                       HelperText="Select one or more topics." Clearable="true" SelectAll="true">
                @if (_allTopicsForSelect != null)
                {
                    @foreach (var topic in _allTopicsForSelect)
                    {
                        <MudSelectItem T="string" @key="topic.Id" Value="@topic.Name">@topic.Name</MudSelectItem>
                    }
                }
            </MudSelect>
        </MudItem>


        <MudItem xs="12">
            <MudText Typo="Typo.h6" Class="mt-4 mb-2">Examples & Synonyms</MudText>
            <MudField Label="Example Sentences" Variant="Variant.Outlined" Class="mb-3">
                @for (int i = 0; i < _command.ExampleSentences.Count; i++)
                {
                    var index = i;
                    <MudPaper Elevation="0" Class="d-flex align-center pa-1 mb-1">
                        <MudTextField @bind-Value="_command.ExampleSentences[index]" Dense="true" Margin="Margin.Dense" HideDetails="true" Placeholder="@($"Example {index + 1}")" Class="flex-grow-1" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="@(() => RemoveListItem(_command.ExampleSentences, index))" Disabled="_command.ExampleSentences.Count <= 1 && string.IsNullOrWhiteSpace(_command.ExampleSentences[0])" />
                    </MudPaper>
                }
                <MudButton Variant="Variant.Text" Size="Size.Small" OnClick="@(() => AddListItem(_command.ExampleSentences))" StartIcon="@Icons.Material.Filled.Add" Class="mt-1">Add Example</MudButton>
            </MudField>

            <MudField Label="Synonyms" Variant="Variant.Outlined">
                @for (int i = 0; i < _command.Synonyms.Count; i++)
                {
                    var index = i;
                    <MudPaper Elevation="0" Class="d-flex align-center pa-1 mb-1">
                        <MudTextField @bind-Value="_command.Synonyms[index]" Dense="true" Margin="Margin.Dense" HideDetails="true" Placeholder="@($"Synonym {index + 1}")" Class="flex-grow-1" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="@(() => RemoveListItem(_command.Synonyms, index))" Disabled="_command.Synonyms.Count <= 1 && string.IsNullOrWhiteSpace(_command.Synonyms[0])" />
                    </MudPaper>
                }
                <MudButton Variant="Variant.Text" Size="Size.Small" OnClick="@(() => AddListItem(_command.Synonyms))" StartIcon="@Icons.Material.Filled.Add" Class="mt-1">Add Synonym</MudButton>
            </MudField>
        </MudItem>

        <MudItem xs="12" Class="mt-4">
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Disabled="@_isSaving">
                @if (_isSaving)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Saving...</MudText>
                }
                else
                {
                    <MudText>Save Word</MudText>
                }
            </MudButton>
            <MudButton Variant="Variant.Outlined" OnClick="@(() => Navigation.NavigateTo("/words"))" Class="ml-2">Cancel</MudButton>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    private AddWordCommand _command = new()
        {
            // Initialize lists to prevent issues if accessed before OnInitializedAsync completes fully
            // or if AddListItem is called very early by some user interaction.
            EnglishTranslation = new List<string> { "" },
            SpanishTranslation = new List<string> { "" },
            ExampleSentences = new List<string> { "" },
            Synonyms = new List<string> { "" },
            TopicNames = new List<string>()
        };

    private List<TopicDto> _allTopicsForSelect = new();
    private IEnumerable<string> _selectedTopicNamesForForm = new List<string>();
    private bool _isSaving = false;

    private List<WordTypeLookupDto> _allWordTypesForSelect = new();
    private List<GenderLookupDto> _allGendersForSelect = new();

    protected override async Task OnInitializedAsync()
    {
        // Ensure default lists have at least one item for the UI if not already initialized
        // This check is now less critical due to initialization in _command declaration
        if (!_command.EnglishTranslation.Any()) _command.EnglishTranslation.Add("");
        if (!_command.SpanishTranslation.Any()) _command.SpanishTranslation.Add("");
        if (!_command.ExampleSentences.Any()) _command.ExampleSentences.Add("");
        if (!_command.Synonyms.Any()) _command.Synonyms.Add("");

        try
        {
            _allTopicsForSelect = await TopicService.GetAllTopicsAsync();
            _allWordTypesForSelect = await WordTypeLookupService.GetAllAsync();
            _allGendersForSelect = await GenderLookupService.GetAllAsync(excludeNone: true);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading data for form: {ex.Message}", Severity.Error);
            Console.WriteLine($"Error loading form data: {ex.Message}{Environment.NewLine}{ex.StackTrace}");
            // Handle case where data loading fails, e.g., navigate away or show error message
        }
    }

    private async Task HandleValidSubmit()
    {
        _isSaving = true;
        StateHasChanged(); // Update UI to show saving state

        try
        {
            _command.TopicNames = _selectedTopicNamesForForm.ToList();
            _command.EnglishTranslation = _command.EnglishTranslation.Where(s => !string.IsNullOrWhiteSpace(s)).ToList();
            _command.SpanishTranslation = _command.SpanishTranslation.Where(s => !string.IsNullOrWhiteSpace(s)).ToList();
            _command.ExampleSentences = _command.ExampleSentences.Where(s => !string.IsNullOrWhiteSpace(s)).ToList();
            _command.Synonyms = _command.Synonyms.Where(s => !string.IsNullOrWhiteSpace(s)).ToList();

            if (_command.Type != WordType.Noun)
            {
                _command.Gender = null;
            }
            else if (_command.Gender == null || _command.Gender == Gender.None)
            {
                Snackbar.Add("Nouns must have a Gender selected.", Severity.Error);
                _isSaving = false;
                StateHasChanged(); // Update UI
                return;
            }

            await WordService.AddWordAsync(_command);
            Snackbar.Add("Word added successfully!", Severity.Success);
            Navigation.NavigateTo("/words");
        }
        catch (FluentValidation.ValidationException vex)
        {
            foreach (var error in vex.Errors)
            {
                Snackbar.Add($"Validation Error: {error.ErrorMessage}", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error adding word: {ex.Message}", Severity.Error);
            Console.WriteLine($"Error adding word: {ex.Message}{Environment.NewLine}{ex.StackTrace}");
        }
        finally
        {
            _isSaving = false;
            StateHasChanged(); // Ensure UI updates after saving attempt
        }
    }

    private void AddListItem(List<string> list)
    {
        list.Add("");
        // StateHasChanged(); // Usually not needed if list is part of Model bound to EditForm
    }

    private void RemoveListItem(List<string> list, int index)
    {
        if (list.Count > 1)
        {
            list.RemoveAt(index);
        }
        else if (list.Count == 1)
        {
            list[0] = "";
        }
        // StateHasChanged(); // Usually not needed
    }
}